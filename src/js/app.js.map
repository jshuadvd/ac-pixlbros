{"version":3,"sources":["index.js"],"names":["camera","controls","renderer","scene","init","animate","container","document","getElementById","console","log","THREE","WebGLRenderer","setPixelRatio","window","devicePixelRatio","setSize","innerWidth","innerHeight","appendChild","domElement","Scene","PerspectiveCamera","position","z","OrbitControls","enableZoom","enablePan","textures","getTextures","materials","i","push","MeshBasicMaterial","map","skyBox","Mesh","SphereGeometry","MeshFaceMaterial","applyMatrix","Matrix4","makeScale","add","addEventListener","onWindowResize","atlasImgUrl","tilesNum","Texture","imageObj","Image","onload","canvas","context","tileWidth","height","length","createElement","getContext","width","drawImage","image","needsUpdate","src","aspect","updateProjectionMatrix","update","render","requestAnimationFrame"],"mappings":"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","file":"app.js","sourcesContent":["let camera;\nlet controls;\nlet renderer;\nlet scene;\n\ninit();\nanimate();\n\nfunction init() {\n\n\tconst container = document.getElementById( 'container' );\n\n\tconsole.log('container', container);\n\n\trenderer = new THREE.WebGLRenderer();\n\trenderer.setPixelRatio( window.devicePixelRatio );\n\trenderer.setSize( window.innerWidth, window.innerHeight );\n\tcontainer.appendChild( renderer.domElement );\n\n\tscene = new THREE.Scene();\n\n\tcamera = new THREE.PerspectiveCamera( 90, window.innerWidth / window.innerHeight, 0.1, 100 );\n\tcamera.position.z = 0.01;\n\n\tcontrols = new THREE.OrbitControls( camera );\n\tcontrols.enableZoom = true;\n\tcontrols.enablePan = false;\n\n\tconst textures = getTextures( \"/textures/animus.jpg\", 6 );\n\n\tconst materials = [];\n\n\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\tmaterials.push( new THREE.MeshBasicMaterial( { map: textures[ i ] } ) );\n\n\t}\n\n\t// var skyBox = new THREE.Mesh( new THREE.CubeGeometry( 1, 1, 1 ), new THREE.MeshFaceMaterial( materials ) );\n\tconst skyBox = new THREE.Mesh( new THREE.SphereGeometry( 30, 32, 32 ), new THREE.MeshFaceMaterial( materials ) );\n\tskyBox.applyMatrix( new THREE.Matrix4().makeScale( 1, 1, - 1 ) );\n\tscene.add( skyBox );\n\n\twindow.addEventListener( 'resize', onWindowResize, false );\n\n}\n\nfunction getTextures( atlasImgUrl, tilesNum ) {\n\n\tconst textures = [];\n\n\tfor ( let i = 0; i < tilesNum; i ++ ) {\n\n\t\ttextures[ i ] = new THREE.Texture();\n\n\t}\n\n\tconst imageObj = new Image();\n\n\timageObj.onload = () => {\n        let canvas;\n        let context;\n        const tileWidth = imageObj.height;\n\n        for ( let i = 0; i < textures.length; i ++ ) {\n\n\t\t\tcanvas = document.createElement( 'canvas' );\n\t\t\tcontext = canvas.getContext( '2d' );\n\t\t\tcanvas.height = tileWidth;\n\t\t\tcanvas.width = tileWidth;\n\t\t\tcontext.drawImage( imageObj, tileWidth * i, 0, tileWidth, tileWidth, 0, 0, tileWidth, tileWidth );\n\t\t\ttextures[ i ].image = canvas\n\t\t\ttextures[ i ].needsUpdate = true;\n\n\t\t}\n    };\n\n\timageObj.src = atlasImgUrl;\n\n\treturn textures;\n\n}\n\nfunction onWindowResize() {\n\n\tcamera.aspect = window.innerWidth / window.innerHeight;\n\tcamera.updateProjectionMatrix();\n\n\trenderer.setSize( window.innerWidth, window.innerHeight );\n\n}\n\nfunction animate() {\n\n\tcontrols.update();\n\n\trenderer.render( scene, camera );\n\n\trequestAnimationFrame( animate );\n\n}"]}